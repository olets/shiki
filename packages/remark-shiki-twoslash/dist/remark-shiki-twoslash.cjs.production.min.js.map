{"version":3,"file":"remark-shiki-twoslash.cjs.production.min.js","sources":["../src/caching.ts","../src/exceptionMessageDOM.ts","../src/index.ts","../src/includes.ts"],"sourcesContent":["import { UserConfigSettings, runTwoSlash } from \"@olets/shiki-twoslash\";\nimport type { TwoSlashReturn } from \"@typescript/twoslash\";\n\n/**\n * Keeps a cache of the JSON responses to a twoslash call in node_modules/.cache/twoslash\n * which should keep CI times down (e.g. the epub vs the handbook etc) - but also during\n * dev time, where it can be super useful.\n */\nexport async function cachedTwoslashCall(\n  code: string,\n  lang: string,\n  settings: UserConfigSettings\n): Promise<TwoSlashReturn | undefined> {\n  const isWebWorker =\n    typeof self !== \"undefined\" &&\n    // @ts-expect-error\n    typeof self.WorkerGlobalScope !== \"undefined\";\n  const isBrowser =\n    isWebWorker ||\n    (typeof window !== \"undefined\" &&\n      typeof window.document !== \"undefined\" &&\n      typeof fetch !== \"undefined\");\n\n  if (isBrowser) {\n    // Not in Node, run un-cached\n    return runTwoSlash(code, lang, settings);\n  }\n\n  const { createHash } = await import(\"crypto\");\n  const { readFileSync, existsSync, mkdirSync, writeFileSync } = await import(\n    \"fs\"\n  );\n  const { join } = await import(\"path\");\n\n  const shikiVersion = await import(\"@typescript/twoslash/package.json\").then(\n    (m) => m.version\n  );\n  const tsVersion = await import(\"typescript/package.json\").then(\n    (m) => m.version\n  );\n  const shasum = createHash(\"sha1\");\n  const codeSha = shasum\n    .update(`${code}-${shikiVersion}-${tsVersion}`)\n    .digest(\"hex\");\n\n  const getNmCache = () => {\n    if (__dirname.includes(\"node_modules\")) {\n      return join(\n        __dirname.split(\"node_modules\")[0],\n        \"node_modules\",\n        \".cache\",\n        \"twoslash\"\n      );\n    } else {\n      return join(__dirname, \"..\", \"..\", \".cache\", \"twoslash\");\n    }\n  };\n\n  async function getPnpCache() {\n    try {\n      // @ts-expect-error ts(2307)\n      const pnp = await import(\"pnpapi\");\n      return join(\n        pnp.getPackageInformation(pnp.topLevel).packageLocation,\n        \"node_modules\",\n        \".cache\",\n        \"twoslash\"\n      );\n    } catch (error) {\n      return getNmCache();\n    }\n  }\n\n  const cacheRoot = process.versions.pnp ? getPnpCache() : getNmCache();\n\n  const cachePath = join(await cacheRoot, `${codeSha}.json`);\n\n  if (existsSync(cachePath)) {\n    if (process.env.debug)\n      console.log(`Using cached twoslash results from ${cachePath}`);\n\n    return JSON.parse(readFileSync(cachePath, \"utf8\"));\n  } else {\n    const results = runTwoSlash(code, lang, settings);\n    if (!existsSync(await cacheRoot))\n      mkdirSync(await cacheRoot, { recursive: true });\n    writeFileSync(cachePath, JSON.stringify(results), \"utf8\");\n    return results;\n  }\n}\n","import type { RemarkCodeNode } from \"./index\"\n\nimport {TwoslashError} from \"@typescript/twoslash\"\n\nfunction escapeHtml(html: string) {\n  return html.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")\n}\n\nexport const setupNodeForTwoslashException = (code: string, node: RemarkCodeNode, error: unknown) => {\n    const css = `<style>\n@import url('http://fonts.cdnfonts.com/css/caslon-os'); \n\n.twoslash-fixed-error-note { \n    position: fixed;\n    top: 20px;\n    right: 20px;\n    display: flex;\n    align-items: center;\n    padding: .25rem .75rem;\n    color: black;\n    background-color: #FCF3D9;\n    background-clip: padding-box;\n    border-bottom: 1px solid rgba(0,0,0,.05);\n    border-radius: .25rem;\n    font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n } \n\n #__docusaurus .twoslash-fixed-error-note {\n    top: 80px;\n }\n\n .twoslash-fixed-error-note:hover {\n    border-bottom: 1px solid rgba(226, 61, 30, 0.8);\n }\n\n .twoslash-error-color {\n    background-color: #E23D1E;\n    width: 18px;\n    height: 18px;\n    border-radius: 9px;\n    margin-right:  10px;\n    color: black;\n }\n\n.twoslash-exception-message { \n    font-family: 'Caslon OS', sans-serif; \n    background-color: #FCF3D9;\n    font-size: 1.1rem;\n    padding: 2rem;\n    border-left: 2px solid #E23D1E;\n}\n\n.twoslash-exception-message p {\n    margin-top: 1rem;\n    margin-bottom: 0.6rem;\n}\n\n.twoslash-exception-message h3 { \n    margin-top: 0.6rem;\n    margin-bottom: 0.3rem;\n    font-size: 1.8rem;\n}\n\n.twoslash-exception-message code {\n     white-space: pre-wrap;\n     font-family: \"JetBrains Mono\", Menlo, Monaco, Consolas, Courier New, monospace;\n     margin-bottom: 20px;\n     background-color: #FCF3D9;\n     color: black;\n     border: none;\n     padding-left: 0;\n }\n\n .twoslash-exception-message > code {\n     display: block;\n     margin-bottom: 1.5rem;\n     margin-top: 3rem;\n }\n\n.twoslash-exception-code {\n    border-left: 2px solid #E5A604;\n    padding-left: 20px;\n    background-color: #FCF3D9;\n    color: black;\n}\n</style>`\n\n    const bodyFromTwoslashError = (error: TwoslashError) =>  {\n        return `\n<h3>${escapeHtml(error.title)}</h3>\n<p>${escapeHtml(error.description).replace(/(?:\\r\\n|\\r|\\n)/g, \"<br>\")}</p>\n<code>${escapeHtml(error.recommendation).replace(/(?:\\r\\n|\\r|\\n)/g, \"<br>\")}</code>\n`\n    }\n\n    const bodyFromError = (error: Error) => {\n        return `<pre><code>${error.message.split(\"## Code\")[0]}</code></pre>`\n    }\n\n    // @ts-ignore\n    const isWebWorker = typeof self !== \"undefined\" && typeof self.WorkerGlobalScope !== \"undefined\"\n    const isBrowser =\n      isWebWorker ||\n      (typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof fetch !== \"undefined\")\n  \n      const isJest = typeof jest !== \"undefined\"\n\n    const eLog = !isBrowser && !isJest ? console.error : (_str: string) => {}\n\n    let body = `<pre><code>${error}</code></pre>`\n    if (typeof error !== \"object\") {\n        body = String(error)\n        eLog(`### Unexpected error:`)\n        eLog(error)\n    } else if (error instanceof TwoslashError) {\n        body = bodyFromTwoslashError(error)\n        eLog(`### Twoslash error: ${error.title}`)\n        eLog(error.description)\n        eLog(error.recommendation)\n        eLog(\"\\n### Code Sample\")\n        eLog(code)\n    } else if (error instanceof Error) {\n        body = bodyFromError(error)\n        eLog(`### Unexpected error:`)\n        eLog(error)\n    }\n\n    const codeSample = `<p>Raising Code:</p><pre class='twoslash-exception-code'><code>${escapeHtml(code)}</code></pre>`\n\n    const html = `\n    <a href='#twoslash-error'><div class='twoslash-fixed-error-note'><span class='twoslash-error-color'></span>Twoslash failure</div></a>\n    <div class='twoslash-exception-message'>${body}${codeSample}</div>`\n\n\n    node.type = \"html\"\n    node.value =  \"<div id='twoslash-error'>\" + css + html + \"</div>\"\n    node.children = []\n}","import type { Node } from \"unist\";\nimport type { Transformer } from \"unified\";\nimport { TwoslashError, TwoSlashReturn } from \"@typescript/twoslash\";\n\nimport visit from \"unist-util-visit\";\nimport { lex, parse } from \"fenceparser\";\nimport { Lang, Highlighter, getHighlighter } from \"@olets/shiki\";\nimport { UserConfigSettings, renderCodeToHTML } from \"@olets/shiki-twoslash\";\n\nimport { cachedTwoslashCall } from \"./caching\";\nimport { addIncludes, replaceIncludesInCode } from \"./includes\";\nimport { setupNodeForTwoslashException } from \"./exceptionMessageDOM\";\n\ntype Fence = {\n  lang: string;\n  meta: NonNullable<ReturnType<typeof parse>>;\n};\n\n// A set of includes which can be pulled via a set ID\nconst includes = new Map<string, string>();\n\nfunction getHTML(\n  code: string,\n  fence: Fence,\n  highlighters: Highlighter[],\n  twoslash: TwoSlashReturn | undefined,\n  twoslashSettings: UserConfigSettings\n) {\n  // Shiki doesn't respect json5 as an input, so switch it\n  // to json, which can handle comments in the syntax highlight\n  const replacer: Record<string, string> = {\n    json5: \"json\",\n  };\n\n  if (replacer[fence.lang]) fence.lang = replacer[fence.lang];\n\n  let results;\n  // Support 'twoslash' includes\n  if (fence.lang === \"twoslash\") {\n    if (!fence.meta.include || typeof fence.meta.include !== \"string\") {\n      throw new Error(\n        \"A twoslash code block needs a pragma like 'twoslash include [name]'\"\n      );\n    }\n\n    addIncludes(includes, fence.meta.include as string, code);\n    results = twoslashSettings.wrapFragments\n      ? `<div class=\"shiki-twoslash-fragment\"></div>`\n      : \"\";\n  } else {\n    // All good, get each highlighter and render the shiki output for it\n    const output = highlighters.map((highlighter) => {\n      // @ts-ignore\n      const themeName: string = highlighter.customName\n        .split(\"/\")\n        .pop()\n        .replace(\".json\", \"\");\n      return renderCodeToHTML(\n        code,\n        fence.lang,\n        fence.meta,\n        { themeName, ...twoslashSettings },\n        highlighter,\n        twoslash\n      );\n    });\n    results = output.join(\"\\n\");\n    if (highlighters.length > 1 && twoslashSettings.wrapFragments) {\n      results = `<div class=\"shiki-twoslash-fragment\">${results}</div>`;\n    }\n  }\n  return results;\n}\n\n/**\n * Runs twoslash across an AST node, switching out the text content, and lang\n * and adding a `twoslash` property to the node.\n */\nexport const runTwoSlashOnNode = (\n  code: string,\n  { lang, meta }: Fence,\n  settings: UserConfigSettings = {}\n) => {\n  // Offer a way to do high-perf iterations, this is less useful\n  // given that we cache the results of twoslash in the file-system\n  const shouldDisableTwoslash =\n    typeof process !== \"undefined\" &&\n    process.env &&\n    !!process.env.TWOSLASH_DISABLE;\n  if (shouldDisableTwoslash) return undefined;\n\n  // Only run twoslash when the meta has the attribute twoslash\n  if (meta.twoslash) {\n    const importedCode = replaceIncludesInCode(includes, code);\n    return cachedTwoslashCall(importedCode, lang, settings);\n  }\n\n  return undefined;\n};\n\n// To make sure we only have one highlighter per theme in a process\nconst highlighterCache = new Map<UserConfigSettings, Promise<Highlighter[]>>();\n\n/** Sets up the highlighters, and cache's for recalls */\nexport const highlightersFromSettings = (settings: UserConfigSettings) => {\n  // console.log(\"i should only log once per theme\")\n  // ^ uncomment this to debug if required\n  const themes =\n    settings.themes || (settings.theme ? [settings.theme] : [\"light-plus\"]);\n\n  return Promise.all(\n    themes.map(async (theme) => {\n      // You can put a string, a path, or the JSON theme obj\n      const themeName = (theme as any).name || theme;\n      const highlighter = await getHighlighter({\n        ...settings,\n        theme,\n        themes: undefined,\n      });\n\n      // @ts-ignore - https://github.com/shikijs/shiki/pull/162 will fix this\n      highlighter.customName = themeName;\n      return highlighter;\n    })\n  );\n};\n\nconst parsingNewFile = () => includes.clear();\n\nconst parseFence = (fence: string): Fence => {\n  const [lang, ...tokens] = lex(fence);\n\n  // if the language is twoslash and include key is found\n  // insert an `=` after include to make it `include=[name]`\n  // which yields better meta\n  if (lang === \"twoslash\") {\n    // Search for `include` in tokens\n    const index = tokens.indexOf(\"include\");\n    if (index !== -1) {\n      tokens.splice(index + 1, 0, \"=\");\n    }\n  }\n\n  const meta = parse(tokens) ?? {};\n\n  return {\n    lang: (lang || \"\").toString(),\n    meta,\n  };\n};\n\n// --- The Remark API ---\n\n/* A rich AST node for uninst with twoslash'd data */\nexport type RemarkCodeNode = Node & {\n  lang?: Lang;\n  meta?: string;\n  // ^ according to mdast\n  type: string;\n  value: string;\n  children: Node[];\n  twoslash?: TwoSlashReturn;\n};\n\nexport type Options = UserConfigSettings;\n\n/**\n * Synchronous outer function, async inner function, which is how the remark\n * async API works.\n */\nfunction remarkTwoslash(settings: Options = {}) {\n  if (!highlighterCache.has(settings)) {\n    highlighterCache.set(settings, highlightersFromSettings(settings));\n  }\n\n  const transform: Transformer = async (markdownAST) => {\n    const highlighters = await highlighterCache.get(settings)!;\n    parsingNewFile();\n    visit(markdownAST, \"code\", remarkVisitor(highlighters, settings));\n  };\n\n  return transform;\n}\n\n/**\n * The function doing the work of transforming any codeblock samples in a remark AST.\n */\nexport function remarkVisitor(\n  highlighters: Highlighter[],\n  twoslashSettings: UserConfigSettings = {}\n) {\n  return async (node: RemarkCodeNode) => {\n    const code = node.value;\n    let fence: Fence = undefined!;\n\n    try {\n      fence = parseFence([node.lang, node.meta].filter(Boolean).join(\" \"));\n    } catch (error) {\n      const twoslashError = new TwoslashError(\n        \"Codefence error\",\n        \"Could not parse the codefence for this code sample\",\n        \"It's usually an unclosed string\",\n        code\n      );\n      return setupNodeForTwoslashException(code, node, twoslashError);\n    }\n\n    // Do nothing if the node has an attribute to ignore\n    if (\n      Object.keys(fence.meta).filter((key) =>\n        (twoslashSettings.ignoreCodeblocksWithCodefenceMeta || []).includes(key)\n      ).length > 0\n    ) {\n      return;\n    }\n\n    let twoslash: TwoSlashReturn | undefined;\n    try {\n      // By allowing node.twoslash to already exist you can set it up yourself in a browser\n      twoslash =\n        node.twoslash ||\n        (await runTwoSlashOnNode(code, fence, twoslashSettings));\n    } catch (error) {\n      const shouldAlwaysRaise = process && process.env && !!process.env.CI;\n      const yeahButNotInTests = typeof jest === \"undefined\";\n\n      if (\n        (shouldAlwaysRaise && yeahButNotInTests) ||\n        twoslashSettings.alwayRaiseForTwoslashExceptions\n      ) {\n        throw error;\n      } else {\n        return setupNodeForTwoslashException(code, node, error);\n      }\n    }\n\n    if (twoslash) {\n      node.value = twoslash.code;\n      node.lang = twoslash.extension as Lang;\n      node.twoslash = twoslash;\n    }\n\n    const shikiHTML = getHTML(\n      node.value,\n      fence,\n      highlighters,\n      twoslash,\n      twoslashSettings\n    );\n    node.type = \"html\";\n    node.value = shikiHTML;\n    node.children = [];\n  };\n}\n\nexport default remarkTwoslash;\n\n// --- The Markdown-it API ---\n\n/** Only the inner function exposed as a synchronous API for markdown-it */\n\nexport const setupForFile = async (settings: UserConfigSettings = {}) => {\n  parsingNewFile();\n\n  if (!highlighterCache.has(settings)) {\n    highlighterCache.set(settings, highlightersFromSettings(settings));\n  }\n\n  let highlighters = await highlighterCache.get(settings)!;\n  return { settings, highlighters };\n};\n\nexport async function transformAttributesToHTML(\n  code: string,\n  fenceString: string,\n  highlighters: Highlighter[],\n  settings: UserConfigSettings\n) {\n  const fence = parseFence(fenceString);\n\n  const twoslash = await runTwoSlashOnNode(code, fence, settings);\n  const newCode = (twoslash && twoslash.code) || code;\n  return getHTML(newCode, fence, highlighters, twoslash, settings);\n}\n","export const addIncludes = (map: Map<string, string>, name: string, code: string) => {\n  const lines: string[] = []\n\n  code.split(\"\\n\").forEach((l, _i) => {\n    const trimmed = l.trim()\n\n    if (trimmed.startsWith(\"// - \")) {\n      const key = trimmed.split(\"// - \")[1].split(\" \")[0]\n      map.set(name + \"-\" + key, lines.join(\"\\n\"))\n    } else {\n      lines.push(l)\n    }\n  })\n  map.set(name, lines.join(\"\\n\"))\n}\n\nexport const replaceIncludesInCode = (_map: Map<string, string>, code: string) => {\n  const includes = /\\/\\/ @include: (.*)$/gm\n\n  // Basically run a regex over the code replacing any // @include: thing with\n  // 'thing' from the map\n\n  // const toReplace: [index:number, length: number, str: string][] = []\n  const toReplace: [number, number, string][] = []\n\n  let match\n  while ((match = includes.exec(code)) !== null) {\n    // This is necessary to avoid infinite loops with zero-width matches\n    if (match.index === includes.lastIndex) {\n      includes.lastIndex++\n    }\n    const key = match[1]\n    const replaceWith = _map.get(key)\n\n    if (!replaceWith) {\n      const msg = `Could not find an include with the key: '${key}'.\\nThere is: ${Array.from(_map.keys())}.`\n      throw new Error(msg)\n    }\n\n    toReplace.push([match.index, match[0].length, replaceWith])\n  }\n\n  let newCode = code.toString()\n  // Go backwards through the found changes so that we can retain index position\n  toReplace.reverse().forEach(r => {\n    newCode = newCode.substring(0, r[0]) + r[2] + newCode.substring(r[0] + r[1])\n  })\n  return newCode\n}\n"],"names":["_cachedTwoslashCall","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","code","lang","settings","createHash","_yield$import2","readFileSync","existsSync","mkdirSync","writeFileSync","join","shikiVersion","tsVersion","shasum","codeSha","getNmCache","getPnpCache","_getPnpCache","cacheRoot","cachePath","results","wrap","_context2","prev","next","_callee","pnp","_context","abrupt","sent","getPackageInformation","topLevel","packageLocation","t0","stop","apply","arguments","self","WorkerGlobalScope","window","document","fetch","runTwoSlash","then","m","version","update","digest","__dirname","includes","split","process","versions","t1","t2","env","debug","console","log","JSON","parse","t3","t4","t5","t6","t7","recursive","stringify","escapeHtml","html","replace","setupNodeForTwoslashException","node","error","isBrowser","isJest","jest","eLog","_str","body","String","TwoslashError","title","description","recommendation","bodyFromTwoslashError","Error","message","bodyFromError","type","value","children","Map","getHTML","fence","highlighters","twoslash","twoslashSettings","replacer","json5","meta","include","map","name","lines","forEach","l","_i","trimmed","trim","startsWith","key","set","push","addIncludes","wrapFragments","highlighter","themeName","customName","pop","renderCodeToHTML","_extends","length","runTwoSlashOnNode","_ref","TWOSLASH_DISABLE","_x","_x2","_x3","cachedTwoslashCall","_map","match","toReplace","exec","index","lastIndex","replaceWith","get","msg","Array","from","keys","newCode","toString","reverse","r","substring","replaceIncludesInCode","highlighterCache","highlightersFromSettings","Promise","all","themes","theme","_ref2","getHighlighter","undefined","parsingNewFile","clear","parseFence","_lex","lex","tokens","slice","indexOf","splice","_parse","remarkVisitor","_ref4","_callee3","twoslashError","shouldAlwaysRaise","yeahButNotInTests","shikiHTML","_context3","filter","Boolean","Object","ignoreCodeblocksWithCodefenceMeta","CI","alwayRaiseForTwoslashExceptions","extension","setupForFile","_ref5","_callee4","has","_context4","_x4","_transformAttributesToHTML","_callee5","fenceString","_context5","_ref3","markdownAST","visit","_x5","_x6","_x7","_x8"],"mappings":"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"}